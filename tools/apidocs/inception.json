{ "contents": [ {
"namespace": "background", "class": [ {"title":"ColorTableDefaults","value":"","method": [ ]},{"title":"DisplayInfo","value":"","method": [ ]},{"title":"LatLonPointImpl","value":"","method": [ ]},{"title":"System","value":"","method": [ ]},{"title":"_Annotation","value":"","method": [ ]},{"title":"_ColorTable","value":"","method": [ ]},{"title":"_DataSource","value":"","method": [ ]},{"title":"_Display","value":"","method": [ ]},{"title":"_JavaProxy","value":"One sentence description goes here&lt;br/&gt;&lt;br/&gt;    This is where a more complete description of the class would go.&lt;br/&gt;&lt;br/&gt;    Attributes:&lt;br/&gt;        attr_one: Blurb about attr_one goes here.&lt;br/&gt;        foo: Blurb about foo.&lt;br/&gt;    ","method": [ ]},{"title":"_Layer","value":"","method": [ ]},{"title":"_Projection","value":"","method": [ ]},{"title":"_Tab","value":"","method": [ ]},{"title":"_Window","value":"","method": [ ]} ],
"function": [ {"title":"activeDisplay","value":"Returns the active McIDAS-V display."},{"title":"allActions","value":"Returns the available McIDAS-V action identifiers."},{"title":"allColorTables","value":"Returns a list of the available color tables."},{"title":"allDisplays","value":"Returns a list of all McIDAS-V displays (aka ViewManagers)"},{"title":"allLayerTypes","value":"Returns a list of the available layer type names"},{"title":"allProjections","value":"Returns a list of the available projections."},{"title":"allWindows","value":""},{"title":"boomstick","value":" This is [your] BOOOMSTICK! "},{"title":"collectGarbage","value":"Signals to Java that it should free any memory that isn't in use."},{"title":"collect_garbage","value":"Signals to Java that it should free any memory that isn't in use."},{"title":"colorTableNames","value":"Returns a list of the valid color table names."},{"title":"contextmanager","value":"@contextmanager decorator.&lt;br/&gt;&lt;br/&gt;    Typical usage:&lt;br/&gt;&lt;br/&gt;        @contextmanager&lt;br/&gt;        def some_generator(<arguments>):&lt;br/&gt;            <setup>&lt;br/&gt;            try:&lt;br/&gt;                yield <value>&lt;br/&gt;            finally:&lt;br/&gt;                <cleanup>&lt;br/&gt;&lt;br/&gt;    This makes this:&lt;br/&gt;&lt;br/&gt;        with some_generator(<arguments>) as <variable>:&lt;br/&gt;            <body>&lt;br/&gt;&lt;br/&gt;    equivalent to this:&lt;br/&gt;&lt;br/&gt;        <setup>&lt;br/&gt;        try:&lt;br/&gt;            <variable> = <value>&lt;br/&gt;            <body>&lt;br/&gt;        finally:&lt;br/&gt;            <cleanup>&lt;br/&gt;&lt;br/&gt;    "},{"title":"createLayer","value":"Creates a new Layer in the active Display.&lt;br/&gt;&lt;br/&gt;    Args:&lt;br/&gt;        layerType: ID string that represents a type of layer. The valid names&lt;br/&gt;                   can be determined with the &quot;allLayerTypes()&quot; function.&lt;br/&gt;&lt;br/&gt;        data: Data object to associate with the resulting layer.&lt;br/&gt;&lt;br/&gt;        dataParameter: Optional...&lt;br/&gt;&lt;br/&gt;    Returns:&lt;br/&gt;        The Layer that was created in the active display.&lt;br/&gt;    "},{"title":"firstDisplay","value":"Returns the first display&lt;br/&gt;&lt;br/&gt;    Longer description goes here.&lt;br/&gt;&lt;br/&gt;    Returns:&lt;br/&gt;        The first Display (aka ViewManager).&lt;br/&gt;&lt;br/&gt;    Raises:&lt;br/&gt;        IndexError: If there are no Displays.&lt;br/&gt;    "},{"title":"firstWindow","value":""},{"title":"getColorTable","value":"Return the ColorTable associated with the given name.&lt;br/&gt;&lt;br/&gt;    Longer description goes here.&lt;br/&gt;&lt;br/&gt;    Args:&lt;br/&gt;        name: The name of the desired ColorTable. If no name was given, the&lt;br/&gt;              name of the IDV's default ColorTable will be used.&lt;br/&gt;&lt;br/&gt;    Returns:&lt;br/&gt;        The first ColorTable with a matching name.&lt;br/&gt;&lt;br/&gt;    Raises:&lt;br/&gt;        LookupError: If there was no ColorTable with the given name.&lt;br/&gt;    "},{"title":"getProjection","value":"Returns the projection associated with the given name.&lt;br/&gt;&lt;br/&gt;    Longer description here.&lt;br/&gt;&lt;br/&gt;    Args:&lt;br/&gt;        name: Name of the desired projection.&lt;br/&gt;&lt;br/&gt;    Returns:&lt;br/&gt;        The first projection whose name matches the given name. If the given&lt;br/&gt;        name is empty (or None), McIDAS-V's default projection is returned.&lt;br/&gt;        (does that make sense!?)&lt;br/&gt;&lt;br/&gt;    Raises:&lt;br/&gt;        ValueError: If there was no projection with the given name.&lt;br/&gt;    "},{"title":"managedDataSource","value":"Loads a data source and performs automatic resource cleanup.&lt;br/&gt;&lt;br/&gt;    Attempts to create and load an IDV DataSource object using a given file.&lt;br/&gt;    This function works as a part of a Python &quot;with statement&quot;. By default&lt;br/&gt;    this function will attempt to &quot;guess&quot; the IDV data source type of the given&lt;br/&gt;    file and call the &quot;boomstick&quot; (TODO: better name) resource cleanup function&lt;br/&gt;    if any errors are encountered.&lt;br/&gt;&lt;br/&gt;    Args:&lt;br/&gt;        path: Required string value that must be a valid file path or URL.&lt;br/&gt;&lt;br/&gt;        cleanup: Option boolean value that allows control over whether or not&lt;br/&gt;        automatic resource cleanup is performed. Default value is True.&lt;br/&gt;&lt;br/&gt;        dataType: Optional string value that must be a valid IDV&lt;br/&gt;        &quot;data source type&quot; ID and should correspond to the file type of the &quot;path&quot;&lt;br/&gt;        argument. Default value is None.&lt;br/&gt;&lt;br/&gt;    Returns:&lt;br/&gt;        If McIDAS-V was able to load the file, a &quot;ucar.unidata.data.DataSource&quot; is&lt;br/&gt;        returned. Otherwise None is returned.&lt;br/&gt;    "},{"title":"performAction","value":""},{"title":"projectionNames","value":"Returns a list of the available projection names"},{"title":"removeAllData","value":"Removes all of the current data sources WITHOUT prompting."},{"title":"removeAllLayers","value":"Removes all of the current layers WITHOUT prompting."},{"title":"setViewSize","value":"Set the view size to a given width and height.&lt;br/&gt;&lt;br/&gt;    Longer description goes here.&lt;br/&gt;&lt;br/&gt;    Args:&lt;br/&gt;        width:&lt;br/&gt;        height:&lt;br/&gt;    "} ],
"attribute": [ {"title":"__file__","value":"__pyclasspath__/background$py.class"},{"title":"__loader__","value":"<ClasspathPyImporter object at 0x2>"},{"title":"__name__","value":"background"},{"title":"getStaticMcv","value":"<java function getStaticMcv 0x3>"},{"title":"java","value":"<java package java 0x4>"},{"title":"ucar","value":"<java package ucar 0x5>"} ]
} ] }
